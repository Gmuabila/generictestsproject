package zzzforgenerictests;

import genericclasses.arraysclassdemo.Student;
import genericclasses.methodreferencedemo.Person;
import org.junit.Test;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

public class ForGenericTests {
    //Use this class to test code that has do with access modifiers
    //Note that a class that has a package-private class is still accessible from a corresponding test package, this is why
    //this class has been created to perform such tests in order to get accurate result regarding access modifiers.

    @Test
    public void genericTestOne(){
//        int x = /;
//        if ((!((Integer) x instanceof Integer))){
//            System.out.println("Not an Integer");
//        }else {
//            System.out.println("An Integer");
//        }

        String[] strArr = new String[]{null, null};
        Arrays.stream(strArr)
                .filter(item -> item != null)
                .map(String::length)          //At this line there is no element in the stream so no NullPointerException will be thrown.
                .forEach(System.out::println);
        System.out.println();
        short x = 10;
        x = (short) (x * 5);   //x = x * 5;   will not work as 5 is an int.  x is of type short, so the result of multiplication should be casted.
        System.out.println(x);

    }

    @Test
    public void genericTestTwo(){
        MethodOverloading x = new MethodOverloading();
        x.hello(null);
        System.out.println();
        System.out.println(2 + 3 + "7");  // 2 + 3 = 5, and the String "7" will print 7, and will be concatenated with 5 to display 57.
    }

    @Test
    public void genericTestThree(){
        //This method is used to test that the compiler automatically generates a
        //No Args Constructor if the class does not have a Constructor defined.
        //In this example the class TestingConst does not have a constructor defined, but
        //we are able to create an object of this class with a No Args Constructor generated by the compiler.
        TestingConst testingConst = new TestingConst();
        testingConst.a = 7;
        testingConst.fish = "Cod";
        System.out.println("int object value is: " + testingConst.a);
        System.out.println("String object value is: " + testingConst.fish);

        //Note: If we are writing at least one constructor hence every class in java can contain a constructor,
        //it may be a default constructor generated by a compiler or customize constructor explicitly provided by the programmer but
        //not both simultaneously.  This means if we write a constructor, then the compiler will not automatically provide a
        //No Args constructor. As long as we provide a constructor, if we need a no Args constructor, then we have to write it.
    }

    @Test
    public void expectedException() {
        try {
            //methodThrowsException();
            fail("Expected exception was not thrown");
        } catch (Exception e) {
            assertNotNull(e);
        }
    }

    @Test
    public void unaryOperator(){
        int a = 20;
        int b;
        int c = (a++ - --a + ++a);
        System.out.println(c);
    }

    @Test
    public void convertingToASCII(){
        //Converting to Unicode
        String str = "B";
        IntStream intStream = str.chars();
        intStream.forEach(System.out::println);
        System.out.println();
        System.out.println("Unicode for char 'B' is: " + Integer.valueOf('B'));
        System.out.println("Unicode for char 'b' is: " + Integer.valueOf('b'));
    }

    @Test
    public void bigDecimalTest(){
        BigDecimal bd1 = new BigDecimal(2);
        BigDecimal bd2 = bd1.pow(3);
        System.out.println(bd1);
        System.out.println(bd2);
    }

    @Test
    public void testMain(){
        Main m1 = new Main(10, 20);
        Main m2 = m1;
        m2.i = 111;
        m2.j = 222;
        System.out.println(m1.i + " " + m1.j);
    }

    @Test
    public void testStrings(){
        String cleanStr = "ndayatrway";
        String resultStr = "yatrw";
        int index = resultStr.indexOf(cleanStr.charAt(2));
        String ch = String.valueOf(resultStr.charAt(index));
        if (index != -1){
           String newStrResult = resultStr.replace(ch, "");  //replace() seem to accept Strings instead of char to replace a character in a String.
            System.out.println(newStrResult);
        }

//        String str = "abc ABC 123 abc";
//        String strNew = str.replace("a", "");
//        System.out.println(strNew);
    }

    @Test
    public void testErrorStream(){
       // System.err.println("error message");
        Scanner myObj = new Scanner(System.in);  // Create a Scanner object
        System.out.println("Enter username");

        String userName = myObj.nextLine();  // Read user input
        System.out.println("Username is: " + userName);  // Output user input
    }

    @Test
    public void test(){
        final int i;
        i = 20;
        System.out.println(i);
    }

    @Test
    public void test2(){
        int a = 5;
        int b = 3;
        int res = (a/b * b + a % b);
        System.out.println("a/b: " + a/b);
        System.out.println("a/b * b: " + a/b * b);
        System.out.println("a % b: " + a % b);
        System.out.println("(a/b * b + a % b): " + res);
        System.out.println(res + a++ - ++b);
    }

    @Test
    public void testStringImmutable(){
        String str = "Java";  //Immutable, cannot append any other string.
        System.out.println(str.hashCode()); //First run: hashcode = 2301506.
        StringBuilder strBuilder = new StringBuilder("Jacoco");
        System.out.println(strBuilder.hashCode());  //First run: hashcode = 1740000325.
        strBuilder.append("File");
        System.out.println(strBuilder);
        System.out.println(strBuilder.hashCode());
        strBuilder = new StringBuilder(strBuilder + "Kilo");
        System.out.println(strBuilder.hashCode());//Second run: hashcode = 1740000325.
        System.out.println(strBuilder);
        System.out.println(strBuilder.hashCode());
    }

}
